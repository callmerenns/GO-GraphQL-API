# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @auth on FIELD_DEFINITION

schema {
  query: Query
  mutation: Mutation
}

scalar DateTime
scalar JSON

type Query {
  # Query User
  getAllUsers(limit: Int!, offset: Int!): UserListResponse! @auth
  getUserByID(id: ID!): UserResponse! @auth

  # Query Product
  getAllProducts(limit: Int!, offset: Int!): ProductListResponse! @auth
  getProductByID(id: ID!): ProductResponse! @auth
  getProductByStock(stock: Stock!): [ProductResponse!]! @auth
}

type Mutation {
  login(input: LoginRequest!): LoginResponse!
  register(input: RegisterRequest!): RegisterResponse!
  logout(input: LogoutRequest!): LogoutResponse! 

  createProduct(input: ProductRequest!): ProductResponse! @auth
  updateProduct(id: ID!, input: ProductRequest!): ProductResponse! @auth
  deleteProduct(id: ID!): Status! @auth
}

input ProductRequest {
  name: String!
  description: String!
  stock: Int!
  price: Float!
}

type ProductResponse {
  id: ID!
  name: String!
  description: String!
  stock: Int!
  price: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  users: [UserResponse!]!
}

type ProductListResponse {
  products: [ProductResponse!]!
	total: Int!
	limit: Int!,
	offset: Int!,
}

input LoginRequest {
  email: String!
  password: String!
}

type LoginResponse {
  message: String!
}

input RegisterRequest {
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  confirmPassword: String!
  role: String!
}

type RegisterResponse {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  role: String!
  products: [ProductResponse!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

type UserResponse {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  role: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  products: [ProductResponse!]!
}

type UserListResponse {
	total: Int!
	limit: Int!,
	offset: Int!,
  users: [UserResponse!]!
}

type Enrollment {
  userId: ID!
  productId: ID!
  user: UserResponse!
  product: ProductResponse!
}

input LogoutRequest {
  token: String!
}

type LogoutResponse {
  message: String!
}

type Status {
  code: Int!
  message: String!
}

type SingleLoginResponse {
  status: Status!
  data: LoginResponse
}

type SingleRegisterResponse {
  status: Status!
  data: RegisterResponse
}

type SingleLogoutResponse {
  status: Status!
  data: LogoutResponse
}

type SingleProductResponse {
  status: Status!
  data: ProductResponse
}

type AnyProductResponse {
  status: Status!
  data: [ProductResponse]
}

type SingleUserResponse {
  status: Status!
  data: UserResponse
}

type AnyUserResponse {
  status: Status!
  data: [UserResponse]
}

input Stock {
  stock: Int!
}
